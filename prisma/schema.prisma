datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Product {
  id          String        @id @default(uuid())
  name        String
  amount       Float
  unit        String
  stockDate   DateTime      @default(now())
  expirationDate  DateTime
  registered  Boolean

  manufacturerId  String
  manufacturer    Manufacturer  @relation(fields: [manufacturerId], references: [id])

  transactions  Transaction[]
  requests      Request[]
}

model Shop {
  id          String        @id @default(uuid())
  name        String

  shopOwnerId String
  shopOwner   User          @relation(fields: [shopOwnerId], references: [id])

  transactions  Transaction[]
  requests      Request[]
}

model Manufacturer {
  id          String        @id @default(uuid())
  name        String
  products    Product[]

  ownerId     String
  owner       User          @relation(fields: [ownerId], references: [id])

  transactions  Transaction[]
}

model Transaction {
  id          String        @id @default(uuid())
  productId   String
  product     Product       @relation(fields: [productId], references: [id])
  amount      Float
  createdAt   DateTime      @default(now())
  shopId      String?
  shop        Shop?          @relation(fields: [shopId], references: [id])
  manufacturerid  String?
  manufacturer    Manufacturer?  @relation(fields: [manufacturerid], references: [id])
}

model Request {
  id          String  @id @default(uuid())
  productId   String
  product     Product @relation(fields: [productId], references: [id])
  amount      Float
  approved    Boolean @default(false)

  shopId      String
  shop        Shop    @relation(fields: [shopId], references: [id])
}

model User {
  id        String          @id @default(uuid())
  createdAt DateTime        @default(now())
  role      USER_ROLE       @default(MANAGER)
  firstname String          @db.VarChar(64)
  lastname  String          @db.VarChar(64)
  email     String          @db.VarChar(64)   @unique
  password  String          @db.VarChar(255)

  manufactures  Manufacturer[]
  shops         Shop[]
  
  tokenVersion            Int?
}

enum USER_ROLE {
  SHOP_OWNER
  FIRM_OWNER
  ADMINISTRATOR
  MANAGER
}

// model Product {
//   id        String  @id @default(uuid())
//   name      String
//   count     Float
//   unit      String
//   recieptDate   DateTime  @default(now())
//   manufacturerId    String
//   manufacturer  Manufacturer @relation(fields: [manufacturerId], references: [id])
//   expirationDate  DateTime
//   shops           Shop[]

//   shipments       Shipment[]
// }

// model Shop {
//   id    String  @id @default(uuid())
//   name  String  @unique
//   products  Product[]

//   shipments    Shipment[]

//   ownerId String
//   owner   User    @relation(fields: [ownerId], references: [id])
// }

// model Manufacturer {
//   id      String  @id @default(uuid())
//   name    String
//   products  Product[]

//   ownerId   String
//   owner     User    @relation(fields: [ownerId], references: [id])
// }

// model Shipment {
//   id  String    @id @default(uuid())
//   productId String
//   product Product @relation(fields: [productId], references: [id])
//   createdAt   DateTime  @default(now())
//   count    Float

//   shopId  String
//   shop    Shop    @relation(fields: [shopId], references: [id])
// }