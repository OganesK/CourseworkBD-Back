### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String
  user: User
}

input CreateUserInput {
  email: String!
  firstname: String!
  lastname: String!
  login: String!
  password: String!
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

type Manufacturer {
  id: String!
  name: String!
  owner: User!
  products(after: ProductWhereUniqueInput, before: ProductWhereUniqueInput, first: Int, last: Int): [Product!]!
}

input ManufacturerCreateInput {
  id: String
  name: String!
  owner: UserCreateNestedOneWithoutManufacturesInput!
  products: ProductCreateNestedManyWithoutManufacturerInput
}

input ManufacturerCreateManyOwnerInput {
  id: String
  name: String!
}

input ManufacturerCreateManyOwnerInputEnvelope {
  data: [ManufacturerCreateManyOwnerInput!]
  skipDuplicates: Boolean
}

input ManufacturerCreateNestedManyWithoutOwnerInput {
  connect: [ManufacturerWhereUniqueInput!]
  connectOrCreate: [ManufacturerCreateOrConnectWithoutOwnerInput!]
  create: [ManufacturerCreateWithoutOwnerInput!]
  createMany: ManufacturerCreateManyOwnerInputEnvelope
}

input ManufacturerCreateNestedOneWithoutProductsInput {
  connect: ManufacturerWhereUniqueInput
  connectOrCreate: ManufacturerCreateOrConnectWithoutProductsInput
  create: ManufacturerCreateWithoutProductsInput
}

input ManufacturerCreateOrConnectWithoutOwnerInput {
  create: ManufacturerCreateWithoutOwnerInput!
  where: ManufacturerWhereUniqueInput!
}

input ManufacturerCreateOrConnectWithoutProductsInput {
  create: ManufacturerCreateWithoutProductsInput!
  where: ManufacturerWhereUniqueInput!
}

input ManufacturerCreateWithoutOwnerInput {
  id: String
  name: String!
  products: ProductCreateNestedManyWithoutManufacturerInput
}

input ManufacturerCreateWithoutProductsInput {
  id: String
  name: String!
  owner: UserCreateNestedOneWithoutManufacturesInput!
}

input ManufacturerScalarWhereInput {
  AND: [ManufacturerScalarWhereInput!]
  NOT: [ManufacturerScalarWhereInput!]
  OR: [ManufacturerScalarWhereInput!]
  id: StringFilter
  name: StringFilter
  ownerId: StringFilter
}

input ManufacturerUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutManufacturesInput
  products: ProductUpdateManyWithoutManufacturerInput
}

input ManufacturerUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input ManufacturerUpdateManyWithWhereWithoutOwnerInput {
  data: ManufacturerUpdateManyMutationInput!
  where: ManufacturerScalarWhereInput!
}

input ManufacturerUpdateManyWithoutOwnerInput {
  connect: [ManufacturerWhereUniqueInput!]
  connectOrCreate: [ManufacturerCreateOrConnectWithoutOwnerInput!]
  create: [ManufacturerCreateWithoutOwnerInput!]
  createMany: ManufacturerCreateManyOwnerInputEnvelope
  delete: [ManufacturerWhereUniqueInput!]
  deleteMany: [ManufacturerScalarWhereInput!]
  disconnect: [ManufacturerWhereUniqueInput!]
  set: [ManufacturerWhereUniqueInput!]
  update: [ManufacturerUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [ManufacturerUpdateManyWithWhereWithoutOwnerInput!]
  upsert: [ManufacturerUpsertWithWhereUniqueWithoutOwnerInput!]
}

input ManufacturerUpdateOneRequiredWithoutProductsInput {
  connect: ManufacturerWhereUniqueInput
  connectOrCreate: ManufacturerCreateOrConnectWithoutProductsInput
  create: ManufacturerCreateWithoutProductsInput
  update: ManufacturerUpdateWithoutProductsInput
  upsert: ManufacturerUpsertWithoutProductsInput
}

input ManufacturerUpdateWithWhereUniqueWithoutOwnerInput {
  data: ManufacturerUpdateWithoutOwnerInput!
  where: ManufacturerWhereUniqueInput!
}

input ManufacturerUpdateWithoutOwnerInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutManufacturerInput
}

input ManufacturerUpdateWithoutProductsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutManufacturesInput
}

input ManufacturerUpsertWithWhereUniqueWithoutOwnerInput {
  create: ManufacturerCreateWithoutOwnerInput!
  update: ManufacturerUpdateWithoutOwnerInput!
  where: ManufacturerWhereUniqueInput!
}

input ManufacturerUpsertWithoutProductsInput {
  create: ManufacturerCreateWithoutProductsInput!
  update: ManufacturerUpdateWithoutProductsInput!
}

input ManufacturerWhereUniqueInput {
  id: String
}

type Mutation {
  createOneManufacturer(data: ManufacturerCreateInput!): Manufacturer!
  createOneProduct(data: ProductCreateInput!): Product!
  createOneShipment(data: ShipmentCreateInput!): Shipment!
  createOneShop(data: ShopCreateInput!): Shop!
  signIn(data: SignInInput!): AuthPayload
  signUp(data: CreateUserInput!): AuthPayload
  updateOneManufacturer(data: ManufacturerUpdateInput!, where: ManufacturerWhereUniqueInput!): Manufacturer
  updateOneProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateOneShipment(data: ShipmentUpdateInput!, where: ShipmentWhereUniqueInput!): Shipment
  updateOneShop(data: ShopUpdateInput!, where: ShopWhereUniqueInput!): Shop
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NullableEnumRoleFieldUpdateOperationsInput {
  set: Role
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

type Product {
  count: Float!
  expirationDate: DateTime!
  id: String!
  manufacturer: Manufacturer!
  name: String!
  recieptDate: DateTime!
  shipments(after: ShipmentWhereUniqueInput, before: ShipmentWhereUniqueInput, first: Int, last: Int): [Shipment!]!
  shops(after: ShopWhereUniqueInput, before: ShopWhereUniqueInput, first: Int, last: Int): [Shop!]!
  unit: String!
}

input ProductCreateInput {
  count: Float!
  expirationDate: DateTime!
  id: String
  manufacturer: ManufacturerCreateNestedOneWithoutProductsInput!
  name: String!
  recieptDate: DateTime
  shipments: ShipmentCreateNestedManyWithoutProductInput
  shops: ShopCreateNestedManyWithoutProductsInput
  unit: String!
}

input ProductCreateManyManufacturerInput {
  count: Float!
  expirationDate: DateTime!
  id: String
  name: String!
  recieptDate: DateTime
  unit: String!
}

input ProductCreateManyManufacturerInputEnvelope {
  data: [ProductCreateManyManufacturerInput!]
  skipDuplicates: Boolean
}

input ProductCreateNestedManyWithoutManufacturerInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutManufacturerInput!]
  create: [ProductCreateWithoutManufacturerInput!]
  createMany: ProductCreateManyManufacturerInputEnvelope
}

input ProductCreateNestedManyWithoutShopsInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutShopsInput!]
  create: [ProductCreateWithoutShopsInput!]
}

input ProductCreateNestedOneWithoutShipmentsInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutShipmentsInput
  create: ProductCreateWithoutShipmentsInput
}

input ProductCreateOrConnectWithoutManufacturerInput {
  create: ProductCreateWithoutManufacturerInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateOrConnectWithoutShipmentsInput {
  create: ProductCreateWithoutShipmentsInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateOrConnectWithoutShopsInput {
  create: ProductCreateWithoutShopsInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateWithoutManufacturerInput {
  count: Float!
  expirationDate: DateTime!
  id: String
  name: String!
  recieptDate: DateTime
  shipments: ShipmentCreateNestedManyWithoutProductInput
  shops: ShopCreateNestedManyWithoutProductsInput
  unit: String!
}

input ProductCreateWithoutShipmentsInput {
  count: Float!
  expirationDate: DateTime!
  id: String
  manufacturer: ManufacturerCreateNestedOneWithoutProductsInput!
  name: String!
  recieptDate: DateTime
  shops: ShopCreateNestedManyWithoutProductsInput
  unit: String!
}

input ProductCreateWithoutShopsInput {
  count: Float!
  expirationDate: DateTime!
  id: String
  manufacturer: ManufacturerCreateNestedOneWithoutProductsInput!
  name: String!
  recieptDate: DateTime
  shipments: ShipmentCreateNestedManyWithoutProductInput
  unit: String!
}

input ProductScalarWhereInput {
  AND: [ProductScalarWhereInput!]
  NOT: [ProductScalarWhereInput!]
  OR: [ProductScalarWhereInput!]
  count: FloatFilter
  expirationDate: DateTimeFilter
  id: StringFilter
  manufacturerId: StringFilter
  name: StringFilter
  recieptDate: DateTimeFilter
  unit: StringFilter
}

input ProductUpdateInput {
  count: FloatFieldUpdateOperationsInput
  expirationDate: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  manufacturer: ManufacturerUpdateOneRequiredWithoutProductsInput
  name: StringFieldUpdateOperationsInput
  recieptDate: DateTimeFieldUpdateOperationsInput
  shipments: ShipmentUpdateManyWithoutProductInput
  shops: ShopUpdateManyWithoutProductsInput
  unit: StringFieldUpdateOperationsInput
}

input ProductUpdateManyMutationInput {
  count: FloatFieldUpdateOperationsInput
  expirationDate: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  recieptDate: DateTimeFieldUpdateOperationsInput
  unit: StringFieldUpdateOperationsInput
}

input ProductUpdateManyWithWhereWithoutManufacturerInput {
  data: ProductUpdateManyMutationInput!
  where: ProductScalarWhereInput!
}

input ProductUpdateManyWithWhereWithoutShopsInput {
  data: ProductUpdateManyMutationInput!
  where: ProductScalarWhereInput!
}

input ProductUpdateManyWithoutManufacturerInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutManufacturerInput!]
  create: [ProductCreateWithoutManufacturerInput!]
  createMany: ProductCreateManyManufacturerInputEnvelope
  delete: [ProductWhereUniqueInput!]
  deleteMany: [ProductScalarWhereInput!]
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutManufacturerInput!]
  updateMany: [ProductUpdateManyWithWhereWithoutManufacturerInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutManufacturerInput!]
}

input ProductUpdateManyWithoutShopsInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutShopsInput!]
  create: [ProductCreateWithoutShopsInput!]
  delete: [ProductWhereUniqueInput!]
  deleteMany: [ProductScalarWhereInput!]
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutShopsInput!]
  updateMany: [ProductUpdateManyWithWhereWithoutShopsInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutShopsInput!]
}

input ProductUpdateOneRequiredWithoutShipmentsInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutShipmentsInput
  create: ProductCreateWithoutShipmentsInput
  update: ProductUpdateWithoutShipmentsInput
  upsert: ProductUpsertWithoutShipmentsInput
}

input ProductUpdateWithWhereUniqueWithoutManufacturerInput {
  data: ProductUpdateWithoutManufacturerInput!
  where: ProductWhereUniqueInput!
}

input ProductUpdateWithWhereUniqueWithoutShopsInput {
  data: ProductUpdateWithoutShopsInput!
  where: ProductWhereUniqueInput!
}

input ProductUpdateWithoutManufacturerInput {
  count: FloatFieldUpdateOperationsInput
  expirationDate: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  recieptDate: DateTimeFieldUpdateOperationsInput
  shipments: ShipmentUpdateManyWithoutProductInput
  shops: ShopUpdateManyWithoutProductsInput
  unit: StringFieldUpdateOperationsInput
}

input ProductUpdateWithoutShipmentsInput {
  count: FloatFieldUpdateOperationsInput
  expirationDate: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  manufacturer: ManufacturerUpdateOneRequiredWithoutProductsInput
  name: StringFieldUpdateOperationsInput
  recieptDate: DateTimeFieldUpdateOperationsInput
  shops: ShopUpdateManyWithoutProductsInput
  unit: StringFieldUpdateOperationsInput
}

input ProductUpdateWithoutShopsInput {
  count: FloatFieldUpdateOperationsInput
  expirationDate: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  manufacturer: ManufacturerUpdateOneRequiredWithoutProductsInput
  name: StringFieldUpdateOperationsInput
  recieptDate: DateTimeFieldUpdateOperationsInput
  shipments: ShipmentUpdateManyWithoutProductInput
  unit: StringFieldUpdateOperationsInput
}

input ProductUpsertWithWhereUniqueWithoutManufacturerInput {
  create: ProductCreateWithoutManufacturerInput!
  update: ProductUpdateWithoutManufacturerInput!
  where: ProductWhereUniqueInput!
}

input ProductUpsertWithWhereUniqueWithoutShopsInput {
  create: ProductCreateWithoutShopsInput!
  update: ProductUpdateWithoutShopsInput!
  where: ProductWhereUniqueInput!
}

input ProductUpsertWithoutShipmentsInput {
  create: ProductCreateWithoutShipmentsInput!
  update: ProductUpdateWithoutShipmentsInput!
}

input ProductWhereUniqueInput {
  id: String
}

type Query {
  manufacturer(where: ManufacturerWhereUniqueInput!): Manufacturer
  manufacturers(after: ManufacturerWhereUniqueInput, before: ManufacturerWhereUniqueInput, first: Int, last: Int): [Manufacturer!]!
  me: User
  product(where: ProductWhereUniqueInput!): Product
  products(after: ProductWhereUniqueInput, before: ProductWhereUniqueInput, first: Int, last: Int): [Product!]!
  shipment(where: ShipmentWhereUniqueInput!): Shipment
  shipments(after: ShipmentWhereUniqueInput, before: ShipmentWhereUniqueInput, first: Int, last: Int): [Shipment!]!
  shop(where: ShopWhereUniqueInput!): Shop
  shops(after: ShopWhereUniqueInput, before: ShopWhereUniqueInput, first: Int, last: Int): [Shop!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum Role {
  ADMINISTRATOR
  FIRM_OWNER
  SHOP_OWNER
}

type Shipment {
  count: Float!
  createdAt: DateTime!
  id: String!
  product: Product!
  shop: Shop!
}

input ShipmentCreateInput {
  count: Float!
  createdAt: DateTime
  id: String
  product: ProductCreateNestedOneWithoutShipmentsInput!
  shop: ShopCreateNestedOneWithoutShipmentsInput!
}

input ShipmentCreateManyProductInput {
  count: Float!
  createdAt: DateTime
  id: String
  shopId: String!
}

input ShipmentCreateManyProductInputEnvelope {
  data: [ShipmentCreateManyProductInput!]
  skipDuplicates: Boolean
}

input ShipmentCreateManyShopInput {
  count: Float!
  createdAt: DateTime
  id: String
  productId: String!
}

input ShipmentCreateManyShopInputEnvelope {
  data: [ShipmentCreateManyShopInput!]
  skipDuplicates: Boolean
}

input ShipmentCreateNestedManyWithoutProductInput {
  connect: [ShipmentWhereUniqueInput!]
  connectOrCreate: [ShipmentCreateOrConnectWithoutProductInput!]
  create: [ShipmentCreateWithoutProductInput!]
  createMany: ShipmentCreateManyProductInputEnvelope
}

input ShipmentCreateNestedManyWithoutShopInput {
  connect: [ShipmentWhereUniqueInput!]
  connectOrCreate: [ShipmentCreateOrConnectWithoutShopInput!]
  create: [ShipmentCreateWithoutShopInput!]
  createMany: ShipmentCreateManyShopInputEnvelope
}

input ShipmentCreateOrConnectWithoutProductInput {
  create: ShipmentCreateWithoutProductInput!
  where: ShipmentWhereUniqueInput!
}

input ShipmentCreateOrConnectWithoutShopInput {
  create: ShipmentCreateWithoutShopInput!
  where: ShipmentWhereUniqueInput!
}

input ShipmentCreateWithoutProductInput {
  count: Float!
  createdAt: DateTime
  id: String
  shop: ShopCreateNestedOneWithoutShipmentsInput!
}

input ShipmentCreateWithoutShopInput {
  count: Float!
  createdAt: DateTime
  id: String
  product: ProductCreateNestedOneWithoutShipmentsInput!
}

input ShipmentScalarWhereInput {
  AND: [ShipmentScalarWhereInput!]
  NOT: [ShipmentScalarWhereInput!]
  OR: [ShipmentScalarWhereInput!]
  count: FloatFilter
  createdAt: DateTimeFilter
  id: StringFilter
  productId: StringFilter
  shopId: StringFilter
}

input ShipmentUpdateInput {
  count: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  product: ProductUpdateOneRequiredWithoutShipmentsInput
  shop: ShopUpdateOneRequiredWithoutShipmentsInput
}

input ShipmentUpdateManyMutationInput {
  count: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input ShipmentUpdateManyWithWhereWithoutProductInput {
  data: ShipmentUpdateManyMutationInput!
  where: ShipmentScalarWhereInput!
}

input ShipmentUpdateManyWithWhereWithoutShopInput {
  data: ShipmentUpdateManyMutationInput!
  where: ShipmentScalarWhereInput!
}

input ShipmentUpdateManyWithoutProductInput {
  connect: [ShipmentWhereUniqueInput!]
  connectOrCreate: [ShipmentCreateOrConnectWithoutProductInput!]
  create: [ShipmentCreateWithoutProductInput!]
  createMany: ShipmentCreateManyProductInputEnvelope
  delete: [ShipmentWhereUniqueInput!]
  deleteMany: [ShipmentScalarWhereInput!]
  disconnect: [ShipmentWhereUniqueInput!]
  set: [ShipmentWhereUniqueInput!]
  update: [ShipmentUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [ShipmentUpdateManyWithWhereWithoutProductInput!]
  upsert: [ShipmentUpsertWithWhereUniqueWithoutProductInput!]
}

input ShipmentUpdateManyWithoutShopInput {
  connect: [ShipmentWhereUniqueInput!]
  connectOrCreate: [ShipmentCreateOrConnectWithoutShopInput!]
  create: [ShipmentCreateWithoutShopInput!]
  createMany: ShipmentCreateManyShopInputEnvelope
  delete: [ShipmentWhereUniqueInput!]
  deleteMany: [ShipmentScalarWhereInput!]
  disconnect: [ShipmentWhereUniqueInput!]
  set: [ShipmentWhereUniqueInput!]
  update: [ShipmentUpdateWithWhereUniqueWithoutShopInput!]
  updateMany: [ShipmentUpdateManyWithWhereWithoutShopInput!]
  upsert: [ShipmentUpsertWithWhereUniqueWithoutShopInput!]
}

input ShipmentUpdateWithWhereUniqueWithoutProductInput {
  data: ShipmentUpdateWithoutProductInput!
  where: ShipmentWhereUniqueInput!
}

input ShipmentUpdateWithWhereUniqueWithoutShopInput {
  data: ShipmentUpdateWithoutShopInput!
  where: ShipmentWhereUniqueInput!
}

input ShipmentUpdateWithoutProductInput {
  count: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  shop: ShopUpdateOneRequiredWithoutShipmentsInput
}

input ShipmentUpdateWithoutShopInput {
  count: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  product: ProductUpdateOneRequiredWithoutShipmentsInput
}

input ShipmentUpsertWithWhereUniqueWithoutProductInput {
  create: ShipmentCreateWithoutProductInput!
  update: ShipmentUpdateWithoutProductInput!
  where: ShipmentWhereUniqueInput!
}

input ShipmentUpsertWithWhereUniqueWithoutShopInput {
  create: ShipmentCreateWithoutShopInput!
  update: ShipmentUpdateWithoutShopInput!
  where: ShipmentWhereUniqueInput!
}

input ShipmentWhereUniqueInput {
  id: String
}

type Shop {
  id: String!
  name: String!
  owner: User!
  products(after: ProductWhereUniqueInput, before: ProductWhereUniqueInput, first: Int, last: Int): [Product!]!
  shipments(after: ShipmentWhereUniqueInput, before: ShipmentWhereUniqueInput, first: Int, last: Int): [Shipment!]!
}

input ShopCreateInput {
  id: String
  name: String!
  owner: UserCreateNestedOneWithoutShopsInput!
  products: ProductCreateNestedManyWithoutShopsInput
  shipments: ShipmentCreateNestedManyWithoutShopInput
}

input ShopCreateManyOwnerInput {
  id: String
  name: String!
}

input ShopCreateManyOwnerInputEnvelope {
  data: [ShopCreateManyOwnerInput!]
  skipDuplicates: Boolean
}

input ShopCreateNestedManyWithoutOwnerInput {
  connect: [ShopWhereUniqueInput!]
  connectOrCreate: [ShopCreateOrConnectWithoutOwnerInput!]
  create: [ShopCreateWithoutOwnerInput!]
  createMany: ShopCreateManyOwnerInputEnvelope
}

input ShopCreateNestedManyWithoutProductsInput {
  connect: [ShopWhereUniqueInput!]
  connectOrCreate: [ShopCreateOrConnectWithoutProductsInput!]
  create: [ShopCreateWithoutProductsInput!]
}

input ShopCreateNestedOneWithoutShipmentsInput {
  connect: ShopWhereUniqueInput
  connectOrCreate: ShopCreateOrConnectWithoutShipmentsInput
  create: ShopCreateWithoutShipmentsInput
}

input ShopCreateOrConnectWithoutOwnerInput {
  create: ShopCreateWithoutOwnerInput!
  where: ShopWhereUniqueInput!
}

input ShopCreateOrConnectWithoutProductsInput {
  create: ShopCreateWithoutProductsInput!
  where: ShopWhereUniqueInput!
}

input ShopCreateOrConnectWithoutShipmentsInput {
  create: ShopCreateWithoutShipmentsInput!
  where: ShopWhereUniqueInput!
}

input ShopCreateWithoutOwnerInput {
  id: String
  name: String!
  products: ProductCreateNestedManyWithoutShopsInput
  shipments: ShipmentCreateNestedManyWithoutShopInput
}

input ShopCreateWithoutProductsInput {
  id: String
  name: String!
  owner: UserCreateNestedOneWithoutShopsInput!
  shipments: ShipmentCreateNestedManyWithoutShopInput
}

input ShopCreateWithoutShipmentsInput {
  id: String
  name: String!
  owner: UserCreateNestedOneWithoutShopsInput!
  products: ProductCreateNestedManyWithoutShopsInput
}

input ShopScalarWhereInput {
  AND: [ShopScalarWhereInput!]
  NOT: [ShopScalarWhereInput!]
  OR: [ShopScalarWhereInput!]
  id: StringFilter
  name: StringFilter
  ownerId: StringFilter
}

input ShopUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutShopsInput
  products: ProductUpdateManyWithoutShopsInput
  shipments: ShipmentUpdateManyWithoutShopInput
}

input ShopUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input ShopUpdateManyWithWhereWithoutOwnerInput {
  data: ShopUpdateManyMutationInput!
  where: ShopScalarWhereInput!
}

input ShopUpdateManyWithWhereWithoutProductsInput {
  data: ShopUpdateManyMutationInput!
  where: ShopScalarWhereInput!
}

input ShopUpdateManyWithoutOwnerInput {
  connect: [ShopWhereUniqueInput!]
  connectOrCreate: [ShopCreateOrConnectWithoutOwnerInput!]
  create: [ShopCreateWithoutOwnerInput!]
  createMany: ShopCreateManyOwnerInputEnvelope
  delete: [ShopWhereUniqueInput!]
  deleteMany: [ShopScalarWhereInput!]
  disconnect: [ShopWhereUniqueInput!]
  set: [ShopWhereUniqueInput!]
  update: [ShopUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [ShopUpdateManyWithWhereWithoutOwnerInput!]
  upsert: [ShopUpsertWithWhereUniqueWithoutOwnerInput!]
}

input ShopUpdateManyWithoutProductsInput {
  connect: [ShopWhereUniqueInput!]
  connectOrCreate: [ShopCreateOrConnectWithoutProductsInput!]
  create: [ShopCreateWithoutProductsInput!]
  delete: [ShopWhereUniqueInput!]
  deleteMany: [ShopScalarWhereInput!]
  disconnect: [ShopWhereUniqueInput!]
  set: [ShopWhereUniqueInput!]
  update: [ShopUpdateWithWhereUniqueWithoutProductsInput!]
  updateMany: [ShopUpdateManyWithWhereWithoutProductsInput!]
  upsert: [ShopUpsertWithWhereUniqueWithoutProductsInput!]
}

input ShopUpdateOneRequiredWithoutShipmentsInput {
  connect: ShopWhereUniqueInput
  connectOrCreate: ShopCreateOrConnectWithoutShipmentsInput
  create: ShopCreateWithoutShipmentsInput
  update: ShopUpdateWithoutShipmentsInput
  upsert: ShopUpsertWithoutShipmentsInput
}

input ShopUpdateWithWhereUniqueWithoutOwnerInput {
  data: ShopUpdateWithoutOwnerInput!
  where: ShopWhereUniqueInput!
}

input ShopUpdateWithWhereUniqueWithoutProductsInput {
  data: ShopUpdateWithoutProductsInput!
  where: ShopWhereUniqueInput!
}

input ShopUpdateWithoutOwnerInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutShopsInput
  shipments: ShipmentUpdateManyWithoutShopInput
}

input ShopUpdateWithoutProductsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutShopsInput
  shipments: ShipmentUpdateManyWithoutShopInput
}

input ShopUpdateWithoutShipmentsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutShopsInput
  products: ProductUpdateManyWithoutShopsInput
}

input ShopUpsertWithWhereUniqueWithoutOwnerInput {
  create: ShopCreateWithoutOwnerInput!
  update: ShopUpdateWithoutOwnerInput!
  where: ShopWhereUniqueInput!
}

input ShopUpsertWithWhereUniqueWithoutProductsInput {
  create: ShopCreateWithoutProductsInput!
  update: ShopUpdateWithoutProductsInput!
  where: ShopWhereUniqueInput!
}

input ShopUpsertWithoutShipmentsInput {
  create: ShopCreateWithoutShipmentsInput!
  update: ShopUpdateWithoutShipmentsInput!
}

input ShopWhereUniqueInput {
  id: String
  name: String
}

input SignInInput {
  login: String!
  password: String!
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type User {
  email: String!
  firstname: String!
  id: String!
  lastname: String!
  manufactures(after: ManufacturerWhereUniqueInput, before: ManufacturerWhereUniqueInput, first: Int, last: Int): [Manufacturer!]!
  role: Role
  shops(after: ShopWhereUniqueInput, before: ShopWhereUniqueInput, first: Int, last: Int): [Shop!]!
}

input UserCreateNestedOneWithoutManufacturesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutManufacturesInput
  create: UserCreateWithoutManufacturesInput
}

input UserCreateNestedOneWithoutShopsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutShopsInput
  create: UserCreateWithoutShopsInput
}

input UserCreateOrConnectWithoutManufacturesInput {
  create: UserCreateWithoutManufacturesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutShopsInput {
  create: UserCreateWithoutShopsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutManufacturesInput {
  createdAt: DateTime
  email: String!
  firstname: String!
  id: String
  lastname: String!
  password: String!
  role: Role
  shops: ShopCreateNestedManyWithoutOwnerInput
  tokenVersion: Int
}

input UserCreateWithoutShopsInput {
  createdAt: DateTime
  email: String!
  firstname: String!
  id: String
  lastname: String!
  manufactures: ManufacturerCreateNestedManyWithoutOwnerInput
  password: String!
  role: Role
  tokenVersion: Int
}

input UserUpdateOneRequiredWithoutManufacturesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutManufacturesInput
  create: UserCreateWithoutManufacturesInput
  update: UserUpdateWithoutManufacturesInput
  upsert: UserUpsertWithoutManufacturesInput
}

input UserUpdateOneRequiredWithoutShopsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutShopsInput
  create: UserCreateWithoutShopsInput
  update: UserUpdateWithoutShopsInput
  upsert: UserUpsertWithoutShopsInput
}

input UserUpdateWithoutManufacturesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstname: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastname: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  role: NullableEnumRoleFieldUpdateOperationsInput
  shops: ShopUpdateManyWithoutOwnerInput
  tokenVersion: NullableIntFieldUpdateOperationsInput
}

input UserUpdateWithoutShopsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstname: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastname: StringFieldUpdateOperationsInput
  manufactures: ManufacturerUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: NullableEnumRoleFieldUpdateOperationsInput
  tokenVersion: NullableIntFieldUpdateOperationsInput
}

input UserUpsertWithoutManufacturesInput {
  create: UserCreateWithoutManufacturesInput!
  update: UserUpdateWithoutManufacturesInput!
}

input UserUpsertWithoutShopsInput {
  create: UserCreateWithoutShopsInput!
  update: UserUpdateWithoutShopsInput!
}

input UserWhereUniqueInput {
  email: String
  id: String
}
