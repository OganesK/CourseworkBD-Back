### This file was generated by Nexus Schema
### Do not make changes to this file directly


input ApproveRequestArgs {
  requestId: String!
}

input ApproveShipmentArgs {
  productId: String!
}

type AuthPayload {
  token: String
  user: User
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input CreateUserInput {
  email: String!
  firstname: String!
  lastname: String!
  login: String!
  password: String!
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input EnumUSER_ROLEFieldUpdateOperationsInput {
  set: USER_ROLE
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

type Manufacturer {
  id: String!
  name: String!
  owner: User!
  transactions(after: TransactionWhereUniqueInput, before: TransactionWhereUniqueInput, first: Int, last: Int): [Transaction!]!
}

input ManufacturerCreateInput {
  id: String
  name: String!
  owner: UserCreateNestedOneWithoutManufacturesInput!
  products: ProductCreateNestedManyWithoutManufacturerInput
  transactions: TransactionCreateNestedManyWithoutManufacturerInput
}

input ManufacturerCreateManyOwnerInput {
  id: String
  name: String!
}

input ManufacturerCreateManyOwnerInputEnvelope {
  data: [ManufacturerCreateManyOwnerInput!]
  skipDuplicates: Boolean
}

input ManufacturerCreateNestedManyWithoutOwnerInput {
  connect: [ManufacturerWhereUniqueInput!]
  connectOrCreate: [ManufacturerCreateOrConnectWithoutOwnerInput!]
  create: [ManufacturerCreateWithoutOwnerInput!]
  createMany: ManufacturerCreateManyOwnerInputEnvelope
}

input ManufacturerCreateNestedOneWithoutProductsInput {
  connect: ManufacturerWhereUniqueInput
  connectOrCreate: ManufacturerCreateOrConnectWithoutProductsInput
  create: ManufacturerCreateWithoutProductsInput
}

input ManufacturerCreateNestedOneWithoutTransactionsInput {
  connect: ManufacturerWhereUniqueInput
  connectOrCreate: ManufacturerCreateOrConnectWithoutTransactionsInput
  create: ManufacturerCreateWithoutTransactionsInput
}

input ManufacturerCreateOrConnectWithoutOwnerInput {
  create: ManufacturerCreateWithoutOwnerInput!
  where: ManufacturerWhereUniqueInput!
}

input ManufacturerCreateOrConnectWithoutProductsInput {
  create: ManufacturerCreateWithoutProductsInput!
  where: ManufacturerWhereUniqueInput!
}

input ManufacturerCreateOrConnectWithoutTransactionsInput {
  create: ManufacturerCreateWithoutTransactionsInput!
  where: ManufacturerWhereUniqueInput!
}

input ManufacturerCreateWithoutOwnerInput {
  id: String
  name: String!
  products: ProductCreateNestedManyWithoutManufacturerInput
  transactions: TransactionCreateNestedManyWithoutManufacturerInput
}

input ManufacturerCreateWithoutProductsInput {
  id: String
  name: String!
  owner: UserCreateNestedOneWithoutManufacturesInput!
  transactions: TransactionCreateNestedManyWithoutManufacturerInput
}

input ManufacturerCreateWithoutTransactionsInput {
  id: String
  name: String!
  owner: UserCreateNestedOneWithoutManufacturesInput!
  products: ProductCreateNestedManyWithoutManufacturerInput
}

input ManufacturerScalarWhereInput {
  AND: [ManufacturerScalarWhereInput!]
  NOT: [ManufacturerScalarWhereInput!]
  OR: [ManufacturerScalarWhereInput!]
  id: StringFilter
  name: StringFilter
  ownerId: StringFilter
}

input ManufacturerUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutManufacturesInput
  products: ProductUpdateManyWithoutManufacturerInput
  transactions: TransactionUpdateManyWithoutManufacturerInput
}

input ManufacturerUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input ManufacturerUpdateManyWithWhereWithoutOwnerInput {
  data: ManufacturerUpdateManyMutationInput!
  where: ManufacturerScalarWhereInput!
}

input ManufacturerUpdateManyWithoutOwnerInput {
  connect: [ManufacturerWhereUniqueInput!]
  connectOrCreate: [ManufacturerCreateOrConnectWithoutOwnerInput!]
  create: [ManufacturerCreateWithoutOwnerInput!]
  createMany: ManufacturerCreateManyOwnerInputEnvelope
  delete: [ManufacturerWhereUniqueInput!]
  deleteMany: [ManufacturerScalarWhereInput!]
  disconnect: [ManufacturerWhereUniqueInput!]
  set: [ManufacturerWhereUniqueInput!]
  update: [ManufacturerUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [ManufacturerUpdateManyWithWhereWithoutOwnerInput!]
  upsert: [ManufacturerUpsertWithWhereUniqueWithoutOwnerInput!]
}

input ManufacturerUpdateOneRequiredWithoutProductsInput {
  connect: ManufacturerWhereUniqueInput
  connectOrCreate: ManufacturerCreateOrConnectWithoutProductsInput
  create: ManufacturerCreateWithoutProductsInput
  update: ManufacturerUpdateWithoutProductsInput
  upsert: ManufacturerUpsertWithoutProductsInput
}

input ManufacturerUpdateOneWithoutTransactionsInput {
  connect: ManufacturerWhereUniqueInput
  connectOrCreate: ManufacturerCreateOrConnectWithoutTransactionsInput
  create: ManufacturerCreateWithoutTransactionsInput
  delete: Boolean
  disconnect: Boolean
  update: ManufacturerUpdateWithoutTransactionsInput
  upsert: ManufacturerUpsertWithoutTransactionsInput
}

input ManufacturerUpdateWithWhereUniqueWithoutOwnerInput {
  data: ManufacturerUpdateWithoutOwnerInput!
  where: ManufacturerWhereUniqueInput!
}

input ManufacturerUpdateWithoutOwnerInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutManufacturerInput
  transactions: TransactionUpdateManyWithoutManufacturerInput
}

input ManufacturerUpdateWithoutProductsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutManufacturesInput
  transactions: TransactionUpdateManyWithoutManufacturerInput
}

input ManufacturerUpdateWithoutTransactionsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutManufacturesInput
  products: ProductUpdateManyWithoutManufacturerInput
}

input ManufacturerUpsertWithWhereUniqueWithoutOwnerInput {
  create: ManufacturerCreateWithoutOwnerInput!
  update: ManufacturerUpdateWithoutOwnerInput!
  where: ManufacturerWhereUniqueInput!
}

input ManufacturerUpsertWithoutProductsInput {
  create: ManufacturerCreateWithoutProductsInput!
  update: ManufacturerUpdateWithoutProductsInput!
}

input ManufacturerUpsertWithoutTransactionsInput {
  create: ManufacturerCreateWithoutTransactionsInput!
  update: ManufacturerUpdateWithoutTransactionsInput!
}

input ManufacturerWhereUniqueInput {
  id: String
}

type Mutation {
  approveRequest(data: ApproveRequestArgs!): String
  approveShipment(data: ApproveShipmentArgs!): String
  createOneManufacturer(data: ManufacturerCreateInput!): Manufacturer!
  createOneProduct(data: ProductCreateInput!): Product!
  createOneShop(data: ShopCreateInput!): Shop!
  createOneTransaction(data: TransactionCreateInput!): Transaction!
  requestProductFromStock(data: RequestProductArgs!): String
  shipGoodsToStock(data: ShipGoodsToStockArgs!): String
  signIn(data: SignInInput!): AuthPayload
  signUp(data: CreateUserInput!): AuthPayload
  updateOneManufacturer(data: ManufacturerUpdateInput!, where: ManufacturerWhereUniqueInput!): Manufacturer
  updateOneProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateOneRequest(data: RequestUpdateInput!, where: RequestWhereUniqueInput!): Request
  updateOneShop(data: ShopUpdateInput!, where: ShopWhereUniqueInput!): Shop
  updateOneTransaction(data: TransactionUpdateInput!, where: TransactionWhereUniqueInput!): Transaction
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

type Product {
  amount: Float!
  expirationDate: DateTime!
  id: String!
  manufacturer: Manufacturer!
  manufacturerId: String!
  name: String!
  requests(after: RequestWhereUniqueInput, before: RequestWhereUniqueInput, first: Int, last: Int): [Request!]!
  stockDate: DateTime!
  transactions(after: TransactionWhereUniqueInput, before: TransactionWhereUniqueInput, first: Int, last: Int): [Transaction!]!
  unit: String!
}

input ProductCreateInput {
  amount: Float!
  expirationDate: DateTime!
  id: String
  manufacturer: ManufacturerCreateNestedOneWithoutProductsInput!
  name: String!
  registered: Boolean!
  requests: RequestCreateNestedManyWithoutProductInput
  stockDate: DateTime
  transactions: TransactionCreateNestedManyWithoutProductInput
  unit: String!
}

input ProductCreateManyManufacturerInput {
  amount: Float!
  expirationDate: DateTime!
  id: String
  name: String!
  registered: Boolean!
  stockDate: DateTime
  unit: String!
}

input ProductCreateManyManufacturerInputEnvelope {
  data: [ProductCreateManyManufacturerInput!]
  skipDuplicates: Boolean
}

input ProductCreateNestedManyWithoutManufacturerInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutManufacturerInput!]
  create: [ProductCreateWithoutManufacturerInput!]
  createMany: ProductCreateManyManufacturerInputEnvelope
}

input ProductCreateNestedOneWithoutRequestsInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutRequestsInput
  create: ProductCreateWithoutRequestsInput
}

input ProductCreateNestedOneWithoutTransactionsInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutTransactionsInput
  create: ProductCreateWithoutTransactionsInput
}

input ProductCreateOrConnectWithoutManufacturerInput {
  create: ProductCreateWithoutManufacturerInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateOrConnectWithoutRequestsInput {
  create: ProductCreateWithoutRequestsInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateOrConnectWithoutTransactionsInput {
  create: ProductCreateWithoutTransactionsInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateWithoutManufacturerInput {
  amount: Float!
  expirationDate: DateTime!
  id: String
  name: String!
  registered: Boolean!
  requests: RequestCreateNestedManyWithoutProductInput
  stockDate: DateTime
  transactions: TransactionCreateNestedManyWithoutProductInput
  unit: String!
}

input ProductCreateWithoutRequestsInput {
  amount: Float!
  expirationDate: DateTime!
  id: String
  manufacturer: ManufacturerCreateNestedOneWithoutProductsInput!
  name: String!
  registered: Boolean!
  stockDate: DateTime
  transactions: TransactionCreateNestedManyWithoutProductInput
  unit: String!
}

input ProductCreateWithoutTransactionsInput {
  amount: Float!
  expirationDate: DateTime!
  id: String
  manufacturer: ManufacturerCreateNestedOneWithoutProductsInput!
  name: String!
  registered: Boolean!
  requests: RequestCreateNestedManyWithoutProductInput
  stockDate: DateTime
  unit: String!
}

input ProductScalarWhereInput {
  AND: [ProductScalarWhereInput!]
  NOT: [ProductScalarWhereInput!]
  OR: [ProductScalarWhereInput!]
  amount: FloatFilter
  expirationDate: DateTimeFilter
  id: StringFilter
  manufacturerId: StringFilter
  name: StringFilter
  registered: BoolFilter
  stockDate: DateTimeFilter
  unit: StringFilter
}

input ProductUpdateInput {
  amount: FloatFieldUpdateOperationsInput
  expirationDate: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  manufacturer: ManufacturerUpdateOneRequiredWithoutProductsInput
  name: StringFieldUpdateOperationsInput
  registered: BoolFieldUpdateOperationsInput
  requests: RequestUpdateManyWithoutProductInput
  stockDate: DateTimeFieldUpdateOperationsInput
  transactions: TransactionUpdateManyWithoutProductInput
  unit: StringFieldUpdateOperationsInput
}

input ProductUpdateManyMutationInput {
  amount: FloatFieldUpdateOperationsInput
  expirationDate: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  registered: BoolFieldUpdateOperationsInput
  stockDate: DateTimeFieldUpdateOperationsInput
  unit: StringFieldUpdateOperationsInput
}

input ProductUpdateManyWithWhereWithoutManufacturerInput {
  data: ProductUpdateManyMutationInput!
  where: ProductScalarWhereInput!
}

input ProductUpdateManyWithoutManufacturerInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutManufacturerInput!]
  create: [ProductCreateWithoutManufacturerInput!]
  createMany: ProductCreateManyManufacturerInputEnvelope
  delete: [ProductWhereUniqueInput!]
  deleteMany: [ProductScalarWhereInput!]
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutManufacturerInput!]
  updateMany: [ProductUpdateManyWithWhereWithoutManufacturerInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutManufacturerInput!]
}

input ProductUpdateOneRequiredWithoutRequestsInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutRequestsInput
  create: ProductCreateWithoutRequestsInput
  update: ProductUpdateWithoutRequestsInput
  upsert: ProductUpsertWithoutRequestsInput
}

input ProductUpdateOneRequiredWithoutTransactionsInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutTransactionsInput
  create: ProductCreateWithoutTransactionsInput
  update: ProductUpdateWithoutTransactionsInput
  upsert: ProductUpsertWithoutTransactionsInput
}

input ProductUpdateWithWhereUniqueWithoutManufacturerInput {
  data: ProductUpdateWithoutManufacturerInput!
  where: ProductWhereUniqueInput!
}

input ProductUpdateWithoutManufacturerInput {
  amount: FloatFieldUpdateOperationsInput
  expirationDate: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  registered: BoolFieldUpdateOperationsInput
  requests: RequestUpdateManyWithoutProductInput
  stockDate: DateTimeFieldUpdateOperationsInput
  transactions: TransactionUpdateManyWithoutProductInput
  unit: StringFieldUpdateOperationsInput
}

input ProductUpdateWithoutRequestsInput {
  amount: FloatFieldUpdateOperationsInput
  expirationDate: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  manufacturer: ManufacturerUpdateOneRequiredWithoutProductsInput
  name: StringFieldUpdateOperationsInput
  registered: BoolFieldUpdateOperationsInput
  stockDate: DateTimeFieldUpdateOperationsInput
  transactions: TransactionUpdateManyWithoutProductInput
  unit: StringFieldUpdateOperationsInput
}

input ProductUpdateWithoutTransactionsInput {
  amount: FloatFieldUpdateOperationsInput
  expirationDate: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  manufacturer: ManufacturerUpdateOneRequiredWithoutProductsInput
  name: StringFieldUpdateOperationsInput
  registered: BoolFieldUpdateOperationsInput
  requests: RequestUpdateManyWithoutProductInput
  stockDate: DateTimeFieldUpdateOperationsInput
  unit: StringFieldUpdateOperationsInput
}

input ProductUpsertWithWhereUniqueWithoutManufacturerInput {
  create: ProductCreateWithoutManufacturerInput!
  update: ProductUpdateWithoutManufacturerInput!
  where: ProductWhereUniqueInput!
}

input ProductUpsertWithoutRequestsInput {
  create: ProductCreateWithoutRequestsInput!
  update: ProductUpdateWithoutRequestsInput!
}

input ProductUpsertWithoutTransactionsInput {
  create: ProductCreateWithoutTransactionsInput!
  update: ProductUpdateWithoutTransactionsInput!
}

input ProductWhereUniqueInput {
  id: String
}

type Query {
  getApprovedProduct: [Product]
  getNotApprovedProduct: [Product]
  getNotApprovedRequests: [Request]
  manufacturer(where: ManufacturerWhereUniqueInput!): Manufacturer
  manufacturers(after: ManufacturerWhereUniqueInput, before: ManufacturerWhereUniqueInput, first: Int, last: Int): [Manufacturer!]!
  me: User
  product(where: ProductWhereUniqueInput!): Product
  products(after: ProductWhereUniqueInput, before: ProductWhereUniqueInput, first: Int, last: Int): [Product!]!
  request(where: RequestWhereUniqueInput!): Request
  requests(after: RequestWhereUniqueInput, before: RequestWhereUniqueInput, first: Int, last: Int): [Request!]!
  shop(where: ShopWhereUniqueInput!): Shop
  shops(after: ShopWhereUniqueInput, before: ShopWhereUniqueInput, first: Int, last: Int): [Shop!]!
  transaction(where: TransactionWhereUniqueInput!): Transaction
  transactions(after: TransactionWhereUniqueInput, before: TransactionWhereUniqueInput, first: Int, last: Int): [Transaction!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

enum QueryMode {
  default
  insensitive
}

type Request {
  amount: Float!
  id: String!
  product: Product!
  shop: Shop!
}

input RequestCreateManyProductInput {
  amount: Float!
  approved: Boolean
  id: String
  shopId: String!
}

input RequestCreateManyProductInputEnvelope {
  data: [RequestCreateManyProductInput!]
  skipDuplicates: Boolean
}

input RequestCreateManyShopInput {
  amount: Float!
  approved: Boolean
  id: String
  productId: String!
}

input RequestCreateManyShopInputEnvelope {
  data: [RequestCreateManyShopInput!]
  skipDuplicates: Boolean
}

input RequestCreateNestedManyWithoutProductInput {
  connect: [RequestWhereUniqueInput!]
  connectOrCreate: [RequestCreateOrConnectWithoutProductInput!]
  create: [RequestCreateWithoutProductInput!]
  createMany: RequestCreateManyProductInputEnvelope
}

input RequestCreateNestedManyWithoutShopInput {
  connect: [RequestWhereUniqueInput!]
  connectOrCreate: [RequestCreateOrConnectWithoutShopInput!]
  create: [RequestCreateWithoutShopInput!]
  createMany: RequestCreateManyShopInputEnvelope
}

input RequestCreateOrConnectWithoutProductInput {
  create: RequestCreateWithoutProductInput!
  where: RequestWhereUniqueInput!
}

input RequestCreateOrConnectWithoutShopInput {
  create: RequestCreateWithoutShopInput!
  where: RequestWhereUniqueInput!
}

input RequestCreateWithoutProductInput {
  amount: Float!
  approved: Boolean
  id: String
  shop: ShopCreateNestedOneWithoutRequestsInput!
}

input RequestCreateWithoutShopInput {
  amount: Float!
  approved: Boolean
  id: String
  product: ProductCreateNestedOneWithoutRequestsInput!
}

input RequestProductArgs {
  amount: Float!
  productId: String!
  shopId: String!
}

input RequestScalarWhereInput {
  AND: [RequestScalarWhereInput!]
  NOT: [RequestScalarWhereInput!]
  OR: [RequestScalarWhereInput!]
  amount: FloatFilter
  approved: BoolFilter
  id: StringFilter
  productId: StringFilter
  shopId: StringFilter
}

input RequestUpdateInput {
  amount: FloatFieldUpdateOperationsInput
  approved: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  product: ProductUpdateOneRequiredWithoutRequestsInput
  shop: ShopUpdateOneRequiredWithoutRequestsInput
}

input RequestUpdateManyMutationInput {
  amount: FloatFieldUpdateOperationsInput
  approved: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input RequestUpdateManyWithWhereWithoutProductInput {
  data: RequestUpdateManyMutationInput!
  where: RequestScalarWhereInput!
}

input RequestUpdateManyWithWhereWithoutShopInput {
  data: RequestUpdateManyMutationInput!
  where: RequestScalarWhereInput!
}

input RequestUpdateManyWithoutProductInput {
  connect: [RequestWhereUniqueInput!]
  connectOrCreate: [RequestCreateOrConnectWithoutProductInput!]
  create: [RequestCreateWithoutProductInput!]
  createMany: RequestCreateManyProductInputEnvelope
  delete: [RequestWhereUniqueInput!]
  deleteMany: [RequestScalarWhereInput!]
  disconnect: [RequestWhereUniqueInput!]
  set: [RequestWhereUniqueInput!]
  update: [RequestUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [RequestUpdateManyWithWhereWithoutProductInput!]
  upsert: [RequestUpsertWithWhereUniqueWithoutProductInput!]
}

input RequestUpdateManyWithoutShopInput {
  connect: [RequestWhereUniqueInput!]
  connectOrCreate: [RequestCreateOrConnectWithoutShopInput!]
  create: [RequestCreateWithoutShopInput!]
  createMany: RequestCreateManyShopInputEnvelope
  delete: [RequestWhereUniqueInput!]
  deleteMany: [RequestScalarWhereInput!]
  disconnect: [RequestWhereUniqueInput!]
  set: [RequestWhereUniqueInput!]
  update: [RequestUpdateWithWhereUniqueWithoutShopInput!]
  updateMany: [RequestUpdateManyWithWhereWithoutShopInput!]
  upsert: [RequestUpsertWithWhereUniqueWithoutShopInput!]
}

input RequestUpdateWithWhereUniqueWithoutProductInput {
  data: RequestUpdateWithoutProductInput!
  where: RequestWhereUniqueInput!
}

input RequestUpdateWithWhereUniqueWithoutShopInput {
  data: RequestUpdateWithoutShopInput!
  where: RequestWhereUniqueInput!
}

input RequestUpdateWithoutProductInput {
  amount: FloatFieldUpdateOperationsInput
  approved: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  shop: ShopUpdateOneRequiredWithoutRequestsInput
}

input RequestUpdateWithoutShopInput {
  amount: FloatFieldUpdateOperationsInput
  approved: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  product: ProductUpdateOneRequiredWithoutRequestsInput
}

input RequestUpsertWithWhereUniqueWithoutProductInput {
  create: RequestCreateWithoutProductInput!
  update: RequestUpdateWithoutProductInput!
  where: RequestWhereUniqueInput!
}

input RequestUpsertWithWhereUniqueWithoutShopInput {
  create: RequestCreateWithoutShopInput!
  update: RequestUpdateWithoutShopInput!
  where: RequestWhereUniqueInput!
}

input RequestWhereUniqueInput {
  id: String
}

input ShipGoodsToStockArgs {
  expirationDate: String!
  manufacturerId: String!
  productAmount: Float!
  productName: String!
  productUnit: String!
}

type Shop {
  id: String!
  name: String!
  requests(after: RequestWhereUniqueInput, before: RequestWhereUniqueInput, first: Int, last: Int): [Request!]!
  shopOwner: User!
  transactions(after: TransactionWhereUniqueInput, before: TransactionWhereUniqueInput, first: Int, last: Int): [Transaction!]!
}

input ShopCreateInput {
  id: String
  name: String!
  requests: RequestCreateNestedManyWithoutShopInput
  shopOwner: UserCreateNestedOneWithoutShopsInput!
  transactions: TransactionCreateNestedManyWithoutShopInput
}

input ShopCreateManyShopOwnerInput {
  id: String
  name: String!
}

input ShopCreateManyShopOwnerInputEnvelope {
  data: [ShopCreateManyShopOwnerInput!]
  skipDuplicates: Boolean
}

input ShopCreateNestedManyWithoutShopOwnerInput {
  connect: [ShopWhereUniqueInput!]
  connectOrCreate: [ShopCreateOrConnectWithoutShopOwnerInput!]
  create: [ShopCreateWithoutShopOwnerInput!]
  createMany: ShopCreateManyShopOwnerInputEnvelope
}

input ShopCreateNestedOneWithoutRequestsInput {
  connect: ShopWhereUniqueInput
  connectOrCreate: ShopCreateOrConnectWithoutRequestsInput
  create: ShopCreateWithoutRequestsInput
}

input ShopCreateNestedOneWithoutTransactionsInput {
  connect: ShopWhereUniqueInput
  connectOrCreate: ShopCreateOrConnectWithoutTransactionsInput
  create: ShopCreateWithoutTransactionsInput
}

input ShopCreateOrConnectWithoutRequestsInput {
  create: ShopCreateWithoutRequestsInput!
  where: ShopWhereUniqueInput!
}

input ShopCreateOrConnectWithoutShopOwnerInput {
  create: ShopCreateWithoutShopOwnerInput!
  where: ShopWhereUniqueInput!
}

input ShopCreateOrConnectWithoutTransactionsInput {
  create: ShopCreateWithoutTransactionsInput!
  where: ShopWhereUniqueInput!
}

input ShopCreateWithoutRequestsInput {
  id: String
  name: String!
  shopOwner: UserCreateNestedOneWithoutShopsInput!
  transactions: TransactionCreateNestedManyWithoutShopInput
}

input ShopCreateWithoutShopOwnerInput {
  id: String
  name: String!
  requests: RequestCreateNestedManyWithoutShopInput
  transactions: TransactionCreateNestedManyWithoutShopInput
}

input ShopCreateWithoutTransactionsInput {
  id: String
  name: String!
  requests: RequestCreateNestedManyWithoutShopInput
  shopOwner: UserCreateNestedOneWithoutShopsInput!
}

input ShopScalarWhereInput {
  AND: [ShopScalarWhereInput!]
  NOT: [ShopScalarWhereInput!]
  OR: [ShopScalarWhereInput!]
  id: StringFilter
  name: StringFilter
  shopOwnerId: StringFilter
}

input ShopUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  requests: RequestUpdateManyWithoutShopInput
  shopOwner: UserUpdateOneRequiredWithoutShopsInput
  transactions: TransactionUpdateManyWithoutShopInput
}

input ShopUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input ShopUpdateManyWithWhereWithoutShopOwnerInput {
  data: ShopUpdateManyMutationInput!
  where: ShopScalarWhereInput!
}

input ShopUpdateManyWithoutShopOwnerInput {
  connect: [ShopWhereUniqueInput!]
  connectOrCreate: [ShopCreateOrConnectWithoutShopOwnerInput!]
  create: [ShopCreateWithoutShopOwnerInput!]
  createMany: ShopCreateManyShopOwnerInputEnvelope
  delete: [ShopWhereUniqueInput!]
  deleteMany: [ShopScalarWhereInput!]
  disconnect: [ShopWhereUniqueInput!]
  set: [ShopWhereUniqueInput!]
  update: [ShopUpdateWithWhereUniqueWithoutShopOwnerInput!]
  updateMany: [ShopUpdateManyWithWhereWithoutShopOwnerInput!]
  upsert: [ShopUpsertWithWhereUniqueWithoutShopOwnerInput!]
}

input ShopUpdateOneRequiredWithoutRequestsInput {
  connect: ShopWhereUniqueInput
  connectOrCreate: ShopCreateOrConnectWithoutRequestsInput
  create: ShopCreateWithoutRequestsInput
  update: ShopUpdateWithoutRequestsInput
  upsert: ShopUpsertWithoutRequestsInput
}

input ShopUpdateOneWithoutTransactionsInput {
  connect: ShopWhereUniqueInput
  connectOrCreate: ShopCreateOrConnectWithoutTransactionsInput
  create: ShopCreateWithoutTransactionsInput
  delete: Boolean
  disconnect: Boolean
  update: ShopUpdateWithoutTransactionsInput
  upsert: ShopUpsertWithoutTransactionsInput
}

input ShopUpdateWithWhereUniqueWithoutShopOwnerInput {
  data: ShopUpdateWithoutShopOwnerInput!
  where: ShopWhereUniqueInput!
}

input ShopUpdateWithoutRequestsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  shopOwner: UserUpdateOneRequiredWithoutShopsInput
  transactions: TransactionUpdateManyWithoutShopInput
}

input ShopUpdateWithoutShopOwnerInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  requests: RequestUpdateManyWithoutShopInput
  transactions: TransactionUpdateManyWithoutShopInput
}

input ShopUpdateWithoutTransactionsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  requests: RequestUpdateManyWithoutShopInput
  shopOwner: UserUpdateOneRequiredWithoutShopsInput
}

input ShopUpsertWithWhereUniqueWithoutShopOwnerInput {
  create: ShopCreateWithoutShopOwnerInput!
  update: ShopUpdateWithoutShopOwnerInput!
  where: ShopWhereUniqueInput!
}

input ShopUpsertWithoutRequestsInput {
  create: ShopCreateWithoutRequestsInput!
  update: ShopUpdateWithoutRequestsInput!
}

input ShopUpsertWithoutTransactionsInput {
  create: ShopCreateWithoutTransactionsInput!
  update: ShopUpdateWithoutTransactionsInput!
}

input ShopWhereUniqueInput {
  id: String
}

input SignInInput {
  login: String!
  password: String!
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Transaction {
  amount: Float!
  id: String!
  manufacturer: Manufacturer
  product: Product!
  shop: Shop
}

input TransactionCreateInput {
  amount: Float!
  createdAt: DateTime
  id: String
  manufacturer: ManufacturerCreateNestedOneWithoutTransactionsInput
  product: ProductCreateNestedOneWithoutTransactionsInput!
  shop: ShopCreateNestedOneWithoutTransactionsInput
}

input TransactionCreateManyManufacturerInput {
  amount: Float!
  createdAt: DateTime
  id: String
  productId: String!
  shopId: String
}

input TransactionCreateManyManufacturerInputEnvelope {
  data: [TransactionCreateManyManufacturerInput!]
  skipDuplicates: Boolean
}

input TransactionCreateManyProductInput {
  amount: Float!
  createdAt: DateTime
  id: String
  manufacturerid: String
  shopId: String
}

input TransactionCreateManyProductInputEnvelope {
  data: [TransactionCreateManyProductInput!]
  skipDuplicates: Boolean
}

input TransactionCreateManyShopInput {
  amount: Float!
  createdAt: DateTime
  id: String
  manufacturerid: String
  productId: String!
}

input TransactionCreateManyShopInputEnvelope {
  data: [TransactionCreateManyShopInput!]
  skipDuplicates: Boolean
}

input TransactionCreateNestedManyWithoutManufacturerInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutManufacturerInput!]
  create: [TransactionCreateWithoutManufacturerInput!]
  createMany: TransactionCreateManyManufacturerInputEnvelope
}

input TransactionCreateNestedManyWithoutProductInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutProductInput!]
  create: [TransactionCreateWithoutProductInput!]
  createMany: TransactionCreateManyProductInputEnvelope
}

input TransactionCreateNestedManyWithoutShopInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutShopInput!]
  create: [TransactionCreateWithoutShopInput!]
  createMany: TransactionCreateManyShopInputEnvelope
}

input TransactionCreateOrConnectWithoutManufacturerInput {
  create: TransactionCreateWithoutManufacturerInput!
  where: TransactionWhereUniqueInput!
}

input TransactionCreateOrConnectWithoutProductInput {
  create: TransactionCreateWithoutProductInput!
  where: TransactionWhereUniqueInput!
}

input TransactionCreateOrConnectWithoutShopInput {
  create: TransactionCreateWithoutShopInput!
  where: TransactionWhereUniqueInput!
}

input TransactionCreateWithoutManufacturerInput {
  amount: Float!
  createdAt: DateTime
  id: String
  product: ProductCreateNestedOneWithoutTransactionsInput!
  shop: ShopCreateNestedOneWithoutTransactionsInput
}

input TransactionCreateWithoutProductInput {
  amount: Float!
  createdAt: DateTime
  id: String
  manufacturer: ManufacturerCreateNestedOneWithoutTransactionsInput
  shop: ShopCreateNestedOneWithoutTransactionsInput
}

input TransactionCreateWithoutShopInput {
  amount: Float!
  createdAt: DateTime
  id: String
  manufacturer: ManufacturerCreateNestedOneWithoutTransactionsInput
  product: ProductCreateNestedOneWithoutTransactionsInput!
}

input TransactionScalarWhereInput {
  AND: [TransactionScalarWhereInput!]
  NOT: [TransactionScalarWhereInput!]
  OR: [TransactionScalarWhereInput!]
  amount: FloatFilter
  createdAt: DateTimeFilter
  id: StringFilter
  manufacturerid: StringNullableFilter
  productId: StringFilter
  shopId: StringNullableFilter
}

input TransactionUpdateInput {
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  manufacturer: ManufacturerUpdateOneWithoutTransactionsInput
  product: ProductUpdateOneRequiredWithoutTransactionsInput
  shop: ShopUpdateOneWithoutTransactionsInput
}

input TransactionUpdateManyMutationInput {
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input TransactionUpdateManyWithWhereWithoutManufacturerInput {
  data: TransactionUpdateManyMutationInput!
  where: TransactionScalarWhereInput!
}

input TransactionUpdateManyWithWhereWithoutProductInput {
  data: TransactionUpdateManyMutationInput!
  where: TransactionScalarWhereInput!
}

input TransactionUpdateManyWithWhereWithoutShopInput {
  data: TransactionUpdateManyMutationInput!
  where: TransactionScalarWhereInput!
}

input TransactionUpdateManyWithoutManufacturerInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutManufacturerInput!]
  create: [TransactionCreateWithoutManufacturerInput!]
  createMany: TransactionCreateManyManufacturerInputEnvelope
  delete: [TransactionWhereUniqueInput!]
  deleteMany: [TransactionScalarWhereInput!]
  disconnect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutManufacturerInput!]
  updateMany: [TransactionUpdateManyWithWhereWithoutManufacturerInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutManufacturerInput!]
}

input TransactionUpdateManyWithoutProductInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutProductInput!]
  create: [TransactionCreateWithoutProductInput!]
  createMany: TransactionCreateManyProductInputEnvelope
  delete: [TransactionWhereUniqueInput!]
  deleteMany: [TransactionScalarWhereInput!]
  disconnect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [TransactionUpdateManyWithWhereWithoutProductInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutProductInput!]
}

input TransactionUpdateManyWithoutShopInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutShopInput!]
  create: [TransactionCreateWithoutShopInput!]
  createMany: TransactionCreateManyShopInputEnvelope
  delete: [TransactionWhereUniqueInput!]
  deleteMany: [TransactionScalarWhereInput!]
  disconnect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutShopInput!]
  updateMany: [TransactionUpdateManyWithWhereWithoutShopInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutShopInput!]
}

input TransactionUpdateWithWhereUniqueWithoutManufacturerInput {
  data: TransactionUpdateWithoutManufacturerInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpdateWithWhereUniqueWithoutProductInput {
  data: TransactionUpdateWithoutProductInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpdateWithWhereUniqueWithoutShopInput {
  data: TransactionUpdateWithoutShopInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpdateWithoutManufacturerInput {
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  product: ProductUpdateOneRequiredWithoutTransactionsInput
  shop: ShopUpdateOneWithoutTransactionsInput
}

input TransactionUpdateWithoutProductInput {
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  manufacturer: ManufacturerUpdateOneWithoutTransactionsInput
  shop: ShopUpdateOneWithoutTransactionsInput
}

input TransactionUpdateWithoutShopInput {
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  manufacturer: ManufacturerUpdateOneWithoutTransactionsInput
  product: ProductUpdateOneRequiredWithoutTransactionsInput
}

input TransactionUpsertWithWhereUniqueWithoutManufacturerInput {
  create: TransactionCreateWithoutManufacturerInput!
  update: TransactionUpdateWithoutManufacturerInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpsertWithWhereUniqueWithoutProductInput {
  create: TransactionCreateWithoutProductInput!
  update: TransactionUpdateWithoutProductInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpsertWithWhereUniqueWithoutShopInput {
  create: TransactionCreateWithoutShopInput!
  update: TransactionUpdateWithoutShopInput!
  where: TransactionWhereUniqueInput!
}

input TransactionWhereUniqueInput {
  id: String
}

enum USER_ROLE {
  ADMINISTRATOR
  FIRM_OWNER
  MANAGER
  SHOP_OWNER
}

type User {
  email: String!
  firstname: String!
  id: String!
  lastname: String!
  manufactures(after: ManufacturerWhereUniqueInput, before: ManufacturerWhereUniqueInput, first: Int, last: Int): [Manufacturer!]!
  role: USER_ROLE!
  shops(after: ShopWhereUniqueInput, before: ShopWhereUniqueInput, first: Int, last: Int): [Shop!]!
}

input UserCreateNestedOneWithoutManufacturesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutManufacturesInput
  create: UserCreateWithoutManufacturesInput
}

input UserCreateNestedOneWithoutShopsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutShopsInput
  create: UserCreateWithoutShopsInput
}

input UserCreateOrConnectWithoutManufacturesInput {
  create: UserCreateWithoutManufacturesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutShopsInput {
  create: UserCreateWithoutShopsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutManufacturesInput {
  createdAt: DateTime
  email: String!
  firstname: String!
  id: String
  lastname: String!
  password: String!
  role: USER_ROLE
  shops: ShopCreateNestedManyWithoutShopOwnerInput
  tokenVersion: Int
}

input UserCreateWithoutShopsInput {
  createdAt: DateTime
  email: String!
  firstname: String!
  id: String
  lastname: String!
  manufactures: ManufacturerCreateNestedManyWithoutOwnerInput
  password: String!
  role: USER_ROLE
  tokenVersion: Int
}

input UserUpdateOneRequiredWithoutManufacturesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutManufacturesInput
  create: UserCreateWithoutManufacturesInput
  update: UserUpdateWithoutManufacturesInput
  upsert: UserUpsertWithoutManufacturesInput
}

input UserUpdateOneRequiredWithoutShopsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutShopsInput
  create: UserCreateWithoutShopsInput
  update: UserUpdateWithoutShopsInput
  upsert: UserUpsertWithoutShopsInput
}

input UserUpdateWithoutManufacturesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstname: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastname: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  role: EnumUSER_ROLEFieldUpdateOperationsInput
  shops: ShopUpdateManyWithoutShopOwnerInput
  tokenVersion: NullableIntFieldUpdateOperationsInput
}

input UserUpdateWithoutShopsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstname: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastname: StringFieldUpdateOperationsInput
  manufactures: ManufacturerUpdateManyWithoutOwnerInput
  password: StringFieldUpdateOperationsInput
  role: EnumUSER_ROLEFieldUpdateOperationsInput
  tokenVersion: NullableIntFieldUpdateOperationsInput
}

input UserUpsertWithoutManufacturesInput {
  create: UserCreateWithoutManufacturesInput!
  update: UserUpdateWithoutManufacturesInput!
}

input UserUpsertWithoutShopsInput {
  create: UserCreateWithoutShopsInput!
  update: UserUpdateWithoutShopsInput!
}

input UserWhereUniqueInput {
  email: String
  id: String
}
